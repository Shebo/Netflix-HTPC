// Generated by CoffeeScript 1.9.1
(function() {
  var ActionHandler, BaseController, Constants, DomManipulation, EventHandler, GenreController, GenreSelectors, GridController, HTMLSelectors, HomeController, HomeSelectors, List, Movie, NetflixAPI, TransmissionHandler, Utils, constants, init,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  chrome.extension.sendMessage({}, function(response) {
    var readyStateCheckInterval;
    readyStateCheckInterval = setInterval(function() {
      var anchor, movie;
      if (document.readyState === "complete") {
        clearInterval(readyStateCheckInterval);
        console.log("Hello. This message was sent from scripts/inject.jasds");
        movie = $('.agMovie.agMovie-lulg').first().find("a");
        $(".gallery").bind("DOMNodeInserted", function() {
          return console.log("child is appended");
        });
        movie.simulate('mouseover');
        anchor = movie.find("a") || movie;
        anchor.simulate('mouseover');
      }
    }, 10);
  });

  Utils = (function() {
    function Utils() {}

    Utils.getObjectKeyInArray = function(array, object) {
      var el, i, j, len;
      for (i = j = 0, len = array.length; j < len; i = ++j) {
        el = array[i];
        if (el === object) {
          return i;
        }
      }
      return false;
    };

    Utils.isJson = function(str) {
      var e;
      try {
        JSON.parse(str);
      } catch (_error) {
        e = _error;
        return false;
      }
      return true;
    };

    Utils.injectScript = function(path) {
      var script;
      script = document.createElement("script");
      script.src = chrome.extension.getURL(path);
      return document.head.appendChild(script);
    };

    Utils.rawAjax = function(url) {
      var deferred, request;
      request = new XMLHttpRequest();
      deferred = Q.defer();
      request.open('GET', url, true);
      request.onload = function() {
        var result;
        if (request.status === 200) {
          result = Utils.isJson(request.responseText) ? JSON.parse(request.responseText) : request.responseText;
          return deferred.resolve(result);
        } else {
          return deferred.reject(request.status);
        }
      };
      request.onerror = function() {
        return deferred.reject(request.status);
      };
      request.onprogress = function() {
        return deferred.notify(event.loaded / event.total);
      };
      request.send();
      return deferred.promise;
    };

    return Utils;

  })();

  EventHandler = (function() {
    function EventHandler() {
      this._safeDispatch = bind(this._safeDispatch, this);
      this.dispatch = bind(this.dispatch, this);
    }

    EventHandler.prototype.dispatch = function(type, action, info) {
      var dispatchInterval;
      if (info == null) {
        info = void 0;
      }
      if (typeof $ !== "undefined" && $ !== null) {
        return this._safeDispatch(type, action, info);
      } else {
        return dispatchInterval = setInterval(function() {
          if (typeof $ !== "undefined" && $ !== null) {
            clearInterval(dispatchInterval);
            return this._safeDispatch(type, action, info);
          }
        }, 10);
      }
    };

    EventHandler.prototype._safeDispatch = function(type, action, info) {
      $.event.trigger({
        type: type,
        action: action,
        info: info
      });
      return false;
    };

    return EventHandler;

  })();

  ActionHandler = (function(superClass) {
    extend(ActionHandler, superClass);

    function ActionHandler() {
      this._bindShortcuts = bind(this._bindShortcuts, this);
      this._initActionBlocker = bind(this._initActionBlocker, this);
      this._initShortcuts = bind(this._initShortcuts, this);
      ActionHandler.__super__.constructor.apply(this, arguments);
      this.actions = ['left', 'up', 'right', 'down', 'ok', 'cancel'];
      this._initShortcuts();
      this._initActionBlocker();
    }

    ActionHandler.prototype._initShortcuts = function() {
      return chrome.storage.sync.get(this.actions, (function(_this) {
        return function(shortcuts) {
          var action, combo;
          for (action in shortcuts) {
            combo = shortcuts[action];
            _this._bindShortcuts(action, combo);
          }
          return true;
        };
      })(this));
    };

    ActionHandler.prototype._initActionBlocker = function() {
      this.isAllowed = true;
      $(":input").focus((function(_this) {
        return function(e) {
          return _this.isAllowed = false;
        };
      })(this));
      return $(":input").blur((function(_this) {
        return function(e) {
          return _this.isAllowed = true;
        };
      })(this));
    };

    ActionHandler.prototype._bindShortcuts = function(action, combo) {
      return KeyboardJS.on(combo, (function(_this) {
        return function(e) {
          if (_this.isAllowed) {
            return _this.dispatch('OSN:Controls', action);
          }
        };
      })(this));
    };

    return ActionHandler;

  })(EventHandler);

  TransmissionHandler = (function(superClass) {
    extend(TransmissionHandler, superClass);

    function TransmissionHandler() {
      this._recieve = bind(this._recieve, this);
      this.transmit = bind(this.transmit, this);
      this.source = 'GroundControl';
      window.addEventListener('message', this._recieve);
    }

    TransmissionHandler.prototype.transmit = function(target, type, action, data) {
      if (data == null) {
        data = void 0;
      }
      return window.postMessage({
        sender: this.source,
        recipient: target,
        action: action,
        type: type,
        data: data
      }, '*');
    };

    TransmissionHandler.prototype._recieve = function(event) {
      var msg;
      msg = event.data;
      if (msg.recipient === this.source) {
        return this.dispatch(msg.type, msg.action, msg.data);
      }
    };

    return TransmissionHandler;

  })(EventHandler);

  Constants = (function() {
    function Constants() {
      this.saveNetflixData = bind(this.saveNetflixData, this);
      this.setNetflixData = bind(this.setNetflixData, this);
      this.getNetflixData = bind(this.getNetflixData, this);
      this.getNetflixData().then((function(_this) {
        return function(data) {
          _this.data = true;
          console.log('yes consts');
          return _this.saveNetflixData(data);
        };
      })(this), (function(_this) {
        return function(error) {
          console.log('no consts');
          return _this.data = false;
        };
      })(this));
      $(document).on("OSN:Constants", (function(_this) {
        return function(e) {
          if (e.action === 'update') {
            return _this.setNetflixData(JSON.stringify(e.info), function() {
              return _this.saveNetflixData(JSON.stringify(e.info));
            });
          }
        };
      })(this));
    }

    Constants.prototype.getNetflixData = function() {
      var deferred;
      deferred = Q.defer();
      chrome.storage.local.get('netflixData', (function(_this) {
        return function(data) {
          if (!_.isEmpty(data)) {
            _this.saveNetflixData(data['netflixData']);
            return deferred.resolve(data['netflixData']);
          } else {
            return deferred.reject();
          }
        };
      })(this));
      return deferred.promise;
    };

    Constants.prototype.setNetflixData = function(data, callback) {
      return chrome.storage.local.set({
        netflixData: data
      }, callback);
    };

    Constants.prototype.saveNetflixData = function(data) {
      var k, ref, results, v;
      ref = JSON.parse(data);
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push(this[k] = v);
      }
      return results;
    };

    return Constants;

  })();

  NetflixAPI = (function() {
    function NetflixAPI() {}

    NetflixAPI.isRelative = true;

    NetflixAPI._getRoot = function() {
      if (!NetflixAPI.isRelative) {
        return (constants.isSecure ? "https" : "http") + "://" + constants.domain + "/";
      } else {
        return '';
      }
    };

    NetflixAPI._getAPIRoot = function() {
      return (NetflixAPI._getRoot()) + "/" + constants.APIRoot + "/" + constants.APIKey;
    };

    NetflixAPI.getMovieInfo = function(movieID, trackID, jquery, style) {
      if (jquery == null) {
        jquery = true;
      }
      if (style == null) {
        style = 'shakti';
      }
      if (jquery) {
        return Q($.getJSON((this._getRoot()) + "/" + constants.APIRoot + "/" + constants.APIKey + "/bob", {
          titleid: movieID,
          trackid: trackID,
          authURL: constants.authURL
        }));
      } else {
        return Utils.rawAjax((this._getRoot()) + "/" + constants.APIRoot + "/" + constants.APIKey + "/bob?titleid=" + movieID + "&trackid=" + trackID + "&authURL=" + constants.authURL);
      }
    };

    return NetflixAPI;

  })();

  HTMLSelectors = (function() {
    function HTMLSelectors() {}

    HTMLSelectors.toHide = [''];

    HTMLSelectors.toDelete = ['.sliderButton', '.boxShotDivider', '.recentlyWatched .cta-recommend'];

    HTMLSelectors.HTMLAndBody = 'html, body';

    HTMLSelectors.nav = '.nav-wrap';

    HTMLSelectors.activeClass = {
      list: '.active-list',
      movie: '.active-movie'
    };

    return HTMLSelectors;

  })();

  HomeSelectors = (function(superClass) {
    extend(HomeSelectors, superClass);

    function HomeSelectors() {
      return HomeSelectors.__super__.constructor.apply(this, arguments);
    }

    HomeSelectors.lists = 'div.mrow';

    HomeSelectors.list = {
      title: 'div.hd h3',
      moviesWrapper: 'div.bd div.agMovieSet'
    };

    HomeSelectors.movies = 'div.bd div.agMovieSet div.agMovie';

    HomeSelectors.movies = 'div.bd div.agMovie';

    HomeSelectors.movieClass = '.agMovie';

    HomeSelectors.movie = {
      title: 'span img',
      poster: 'span img',
      url: 'span a',
      id: 'span a'
    };

    return HomeSelectors;

  })(HTMLSelectors);

  GenreSelectors = (function(superClass) {
    extend(GenreSelectors, superClass);

    function GenreSelectors() {
      return GenreSelectors.__super__.constructor.apply(this, arguments);
    }

    GenreSelectors.lists = 'div#genrePage';

    GenreSelectors.list = {
      title: 'div#genreControls a#title',
      moviesWrapper: 'div.gallery'
    };

    GenreSelectors.movies = 'div.gallery div.lockup';

    GenreSelectors.movieClass = '.lockup';

    GenreSelectors.movie = {
      title: 'img',
      poster: 'img',
      url: 'a',
      id: 'a'
    };

    return GenreSelectors;

  })(HTMLSelectors);

  DomManipulation = (function() {
    function DomManipulation() {}

    DomManipulation.toggleElement = function(type, newElement, oldElement) {
      var activeClass;
      activeClass = HTMLSelectors.activeClass[type].substr(1);
      if (oldElement != null) {
        oldElement.removeClass(activeClass);
      }
      newElement.addClass(activeClass);
      if (type === 'movie') {
        return this.scrollToElement(newElement);
      }
    };

    DomManipulation.scrollToElementOLD = function(element) {
      var ElementBottom, ElementTop, HTML, offsetBottom, offsetTop;
      HTML = HTMLSelectors;
      offsetTop = (element.offset().top + element.height()) - $(window).scrollTop();
      offsetBottom = $(window).scrollTop() - (element.offset().top + element.height());
      ElementBottom = (element.offset().top - window.innerHeight) + element.height();
      ElementTop = element.offset().top - $(HTML.nav).height();
      if (offsetTop > window.innerHeight || element.offset().top < $(window).scrollTop()) {
        return $(HTML.HTMLAndBody).stop().animate({
          scrollTop: ElementBottom
        }, 300);
      } else if (offsetBottom < 0) {
        return $(HTML.HTMLAndBody).stop().animate({
          scrollTop: ElementTop
        }, 300);
      }
    };

    DomManipulation.scrollToElement = function(element) {
      var HTML, alignedToBottom, alignedToTop, eHeight, eOffset, nHeight, scrollPosition, wHeight, wScrollTop;
      HTML = HTMLSelectors;
      wHeight = $(window).height();
      wScrollTop = $(window).scrollTop();
      eOffset = element.offset().top;
      eHeight = element.height();
      nHeight = $(HTML.nav).height();
      alignedToBottom = eOffset - wHeight + eHeight;
      alignedToTop = eOffset - nHeight;
      if (eOffset - wScrollTop + eHeight > wHeight) {
        scrollPosition = alignedToTop;
      } else if (eOffset < wScrollTop) {
        scrollPosition = alignedToBottom;
      }
      return $(HTML.HTMLAndBody).stop().animate({
        scrollTop: scrollPosition
      }, 300);
    };

    return DomManipulation;

  })();

  List = (function() {
    function List(HTMLSelectors, lists, position) {
      if (position == null) {
        position = 0;
      }
      this.HTML = HTMLSelectors;
      this.Object = this._getObject(lists, position);
      this.Title = this._getTitle();
    }

    List.prototype._getObject = function(collection, position) {
      if (position === 0) {
        return collection.first();
      } else if (position === collection.length - 1) {
        return collection.last();
      } else {
        return collection.eq(position);
      }
    };

    List.prototype._getTitle = function() {
      return $.trim(this.Object.find(this.HTML.list.title).last().text());
    };

    return List;

  })();

  Movie = (function() {
    function Movie(HTMLSelectors, movies, position) {
      if (position == null) {
        position = 0;
      }
      this.HTML = HTMLSelectors;
      this.Object = this._getObject(movies, position);
      this.Title = this._getTitle();
      this.Poster = this._getPoster();
      this.URL = this._getURL();
      this.MovieID = this._getMovieID();
      this.TrackID = this._getTrackID();
      this.ListIndex = this._getListIndex();
      this.MovieIndex = this._getMovieIndex();
    }

    Movie.prototype._getObject = function(collection, position) {
      if (position === 0) {
        return collection.first();
      } else if (position === collection.length - 1) {
        return collection.last();
      } else {
        return collection.eq(position);
      }
    };

    Movie.prototype._getTitle = function() {
      return this.Object.find(this.HTML.movie.title).attr('alt');
    };

    Movie.prototype._getPoster = function() {
      return this.Object.find(this.HTML.movie.poster).attr('src');
    };

    Movie.prototype._getURL = function() {
      return this.Object.find(this.HTML.movie.url).attr('href');
    };

    Movie.prototype._getMovieID = function() {
      return this.Object.find(this.HTML.movie.url).attr('data-uitrack').split(',')[0];
    };

    Movie.prototype._getTrackID = function() {
      return this.Object.find(this.HTML.movie.url).attr('data-uitrack').split(',')[1];
    };

    Movie.prototype._getListIndex = function() {
      return this.Object.find(this.HTML.movie.url).attr('data-uitrack').split(',')[2];
    };

    Movie.prototype._getMovieIndex = function() {
      return this.Object.find(this.HTML.movie.url).attr('data-uitrack').split(',')[3];
    };

    return Movie;

  })();

  BaseController = (function() {
    function BaseController() {
      this.cancel = bind(this.cancel, this);
      this.enter = bind(this.enter, this);
      this.left = bind(this.left, this);
      this.right = bind(this.right, this);
      this.down = bind(this.down, this);
      this.up = bind(this.up, this);
      this.doAction = bind(this.doAction, this);
      this.ACTIONS = {
        LEFT: 'left',
        RIGHT: 'right',
        UP: 'up',
        DOWN: 'down',
        OK: 'ok',
        CANCEL: 'cancel'
      };
      $(document).on("OSN:Controls", (function(_this) {
        return function(e) {
          return setTimeout(function() {
            console.log("jquery event:", e);
            return _this.doAction(e.action);
          }, 0);
        };
      })(this));
    }

    BaseController.prototype.doAction = function(action) {
      return console.log("Do " + action);
    };

    BaseController.prototype.up = function() {
      return console.log("up");
    };

    BaseController.prototype.down = function() {
      return console.log("down");
    };

    BaseController.prototype.right = function() {
      return console.log("right");
    };

    BaseController.prototype.left = function() {
      return console.log("left");
    };

    BaseController.prototype.enter = function() {
      return console.log("enter");
    };

    BaseController.prototype.cancel = function() {
      return console.log("cancel");
    };

    return BaseController;

  })();

  GridController = (function(superClass) {
    extend(GridController, superClass);

    function GridController(HTMLSelectors) {
      this._updateMovie = bind(this._updateMovie, this);
      this._updateList = bind(this._updateList, this);
      this._prevList = bind(this._prevList, this);
      this._nextList = bind(this._nextList, this);
      this._gridMove = bind(this._gridMove, this);
      this._mouseMove = bind(this._mouseMove, this);
      this.right = bind(this.right, this);
      this.down = bind(this.down, this);
      this.up = bind(this.up, this);
      this.left = bind(this.left, this);
      this._getRowSize = bind(this._getRowSize, this);
      this.doAction = bind(this.doAction, this);
      GridController.__super__.constructor.apply(this, arguments);
      this.HTML = HTMLSelectors;
      this.lists = $(this.HTML.lists);
      this._updateList(0);
      this._updateMovie(0);
      $(window).resize(this._getRowSize);
      $(this.HTML.movies).mouseover(this._mouseMove);
    }

    GridController.prototype.doAction = function(action) {
      switch (action) {
        case this.ACTIONS.LEFT:
          return this.left();
        case this.ACTIONS.RIGHT:
          return this.right();
        case this.ACTIONS.UP:
          return this.up();
        case this.ACTIONS.DOWN:
          return this.down();
        case this.ACTIONS.OK:
          return this.confirm();
        case this.ACTIONS.CANCEL:
          return this.cancel();
        default:
          return null;
      }
    };

    GridController.prototype._getRowSize = function(event) {
      var j, len, movie, ref;
      this.RowSize = 0;
      ref = this.movies;
      for (j = 0, len = ref.length; j < len; j++) {
        movie = ref[j];
        if ($(movie).prev().length > 0 && $(movie).position().top !== $(movie).prev().position().top) {
          break;
        }
        this.RowSize++;
      }
      return this.LastRowSize = this.movies.length % this.RowSize === 0 ? this.RowSize : this.movies.length % this.RowSize;
    };

    GridController.prototype.left = function() {
      return this._gridMove(-1, 0);
    };

    GridController.prototype.up = function() {
      return this._gridMove(0, -1);
    };

    GridController.prototype.down = function() {
      return this._gridMove(0, 1);
    };

    GridController.prototype.right = function() {
      return this._gridMove(1, 0);
    };

    GridController.prototype._mouseMove = function(e) {
      setTimeout((function(_this) {
        return function() {
          var newListIndex, newMovie, newMovieIndex;
          newMovie = e.delegateTarget;
          if (!$(newMovie).hasClass(_this.HTML.movieClass.substr(1))) {
            return false;
          }
          newListIndex = $(newMovie).parents(_this.HTML.lists) ? Utils.getObjectKeyInArray(_this.lists, $(newMovie).parents(_this.HTML.lists)[0]) : _this.listIndex;
          _this._updateList(newListIndex);
          newMovieIndex = Utils.getObjectKeyInArray(_this.movies, newMovie);
          _this._updateMovie(newMovieIndex);
          return true;
        };
      })(this), 0);
      return true;
    };

    GridController.prototype._gridMove = function(x, y) {
      var axis, newMovieIndex;
      if (y === 0) {
        axis = 'horizontal';
        newMovieIndex = this.movieIndex + x;
      } else if (x === 0) {
        axis = 'vertical';
        newMovieIndex = this.movieIndex + (this.RowSize * y);
      }
      if (this.movies[newMovieIndex]) {
        return this._updateMovie(newMovieIndex);
      } else {
        if (this.movies.length - 1 < newMovieIndex && (this.lists[this.listIndex + 1] != null)) {
          newMovieIndex = this._nextList(axis);
        } else if (newMovieIndex < 0 && (this.lists[this.listIndex - 1] != null)) {
          newMovieIndex = this._prevList(axis);
        } else {
          return false;
        }
        this._updateMovie(newMovieIndex);
        return true;
      }
    };

    GridController.prototype._nextList = function(axis) {
      var j, newMovieIndex, ref, ref1, results;
      if (axis === 'horizontal') {
        newMovieIndex = 0;
        this._updateList(this.listIndex + 1);
      } else if (axis === 'vertical') {
        if (ref = this.movieIndex, indexOf.call((function() {
          results = [];
          for (var j = 0, ref1 = this.movies.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; 0 <= ref1 ? j++ : j--){ results.push(j); }
          return results;
        }).apply(this).slice(-this.LastRowSize), ref) >= 0) {
          newMovieIndex = this.movieIndex % this.RowSize;
          this._updateList(this.listIndex + 1);
        } else {
          newMovieIndex = this.movies.length - 1;
        }
      }
      return newMovieIndex;
    };

    GridController.prototype._prevList = function(axis) {
      var j, newMovieIndex, ref, results;
      this._updateList(this.listIndex - 1);
      if (axis === 'horizontal') {
        newMovieIndex = this.movies.length - 1;
      } else if (axis === 'vertical') {
        if (this.LastRowSize - 1 >= this.movieIndex) {
          newMovieIndex = (function() {
            results = [];
            for (var j = 0, ref = this.movies.length - 1; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--){ results.push(j); }
            return results;
          }).apply(this).slice(-this.LastRowSize)[this.movieIndex];
        } else {
          newMovieIndex = this.movies.length - 1;
        }
      }
      return newMovieIndex;
    };

    GridController.prototype._updateList = function(newIndex) {
      var oldList;
      if (newIndex === this.listIndex || _.isEmpty(this.lists)) {
        return false;
      }
      oldList = this.List != null ? this.List.Object : null;
      this.listIndex = newIndex;
      this.List = new List(this.HTML, this.lists, this.listIndex);
      this.movies = this.List.Object.find(this.HTML.movies);
      this._getRowSize();
      return DomManipulation.toggleElement('list', this.List.Object, oldList);
    };

    GridController.prototype._updateMovie = function(newIndex) {
      var oldMovie;
      if (newIndex === this.movieIndex || _.isEmpty(this.movies)) {
        return false;
      }
      oldMovie = this.Movie != null ? this.Movie.Object : null;
      this.movieIndex = newIndex;
      this.Movie = new Movie(this.HTML, this.movies, this.movieIndex);
      return DomManipulation.toggleElement('movie', this.Movie.Object, oldMovie);
    };

    return GridController;

  })(BaseController);

  HomeController = (function(superClass) {
    extend(HomeController, superClass);

    function HomeController() {
      this.HTML = HomeSelectors;
      HomeController.__super__.constructor.call(this, this.HTML);
    }

    return HomeController;

  })(GridController);

  GenreController = (function(superClass) {
    extend(GenreController, superClass);

    function GenreController() {
      this.HTML = GenreSelectors;
      GenreController.__super__.constructor.call(this, this.HTML);
    }

    return GenreController;

  })(GridController);

  constants = new Constants;

  init = function() {
    var actionHandler, controller, msg, testAPI;
    msg = new TransmissionHandler;
    Utils.injectScript("js/jquery/jquery.min.js");
    Utils.injectScript("src/inject/js/controller.js");
    actionHandler = new ActionHandler;
    if (window.location.pathname.match("/WiHome")) {
      controller = new HomeController;
    } else if (window.location.pathname.match("/WiGenre")) {
      controller = new GenreController;
    }
    testAPI = function(movieID, trackID) {
      var deferred;
      deferred = Q.defer();
      constants.getNetflixData().then(function(data) {
        return deferred.resolve(NetflixAPI.getMovieInfo(movieID, trackID, false));
      }, function(error) {
        return deferred.reject(0);
      });
      return deferred.promise;
    };
    return testAPI('70180183', '13462047').fail(function(error) {
      if (error === 404 || error === 0) {
        return msg.transmit('MajorTom', 'OSN:Constants', 'fetch');
      }
    });
  };

  init();

}).call(this);
