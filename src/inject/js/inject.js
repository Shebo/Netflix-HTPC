// Generated by CoffeeScript 1.9.1
(function() {
  var ActionHandler, BaseController, EventHandler, HTMLSelectors, HomeController, List, Movie, TransmissionHandler, msg, script, ttFt, ttt,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  chrome.extension.sendMessage({}, function(response) {
    var readyStateCheckInterval;
    readyStateCheckInterval = setInterval(function() {
      var anchor, movie, shebo1, shebo2;
      if (document.readyState === "complete") {
        clearInterval(readyStateCheckInterval);
        console.log("Hello. This message was sent from scripts/inject.jasds");
        $('#global-header').append('<li><a id="sheboshebo1">Test1</a></li>');
        $('#global-header').append('<li><a id="sheboshebo2">Test2</a></li>');
        $('#sheboshebo1').hover(function() {
          return console.log('1 hover on!!!');
        }, function() {
          return console.log('1 hover off!!!');
        });
        $('#sheboshebo2').hover(function() {
          return console.log('2 hover on!!!');
        }, function() {
          return console.log('2 hover off!!!');
        });
        $('#sheboshebo1').click(function() {
          return console.log('1 click on!!!');
        });
        $('#sheboshebo2').click(function() {
          return console.log('2 clicked!!!');
        });
        movie = $('.agMovie.agMovie-lulg').first().find("a");
        shebo1 = $('#sheboshebo1');
        shebo2 = $('#sheboshebo2');
        shebo1.simulate('mouseover');
        shebo2.simulate('click');
        movie.simulate('mouseover');
        anchor = movie.find("a") || movie;
        anchor.simulate('mouseover');
      }
    }, 10);
  });

  EventHandler = (function() {
    function EventHandler() {
      this.dispatch = bind(this.dispatch, this);
    }

    EventHandler.prototype.dispatch = function(action) {
      $.event.trigger({
        type: "NetflixHTPC",
        action: action
      });
      return false;
    };

    return EventHandler;

  })();

  ActionHandler = (function(superClass) {
    extend(ActionHandler, superClass);

    ActionHandler.actions = ['left', 'up', 'right', 'down', 'ok', 'cancel'];

    function ActionHandler() {
      this.bindShortcuts = bind(this.bindShortcuts, this);
      this.initShortcuts = bind(this.initShortcuts, this);
      ActionHandler.__super__.constructor.apply(this, arguments);
      this.initShortcuts();
    }

    ActionHandler.prototype.initShortcuts = function() {
      return chrome.storage.sync.get(this.actions, (function(_this) {
        return function(shortcuts) {
          var action, combo, results;
          results = [];
          for (action in shortcuts) {
            combo = shortcuts[action];
            results.push(_this.bindShortcuts(action, combo));
          }
          return results;
        };
      })(this));
    };

    ActionHandler.prototype.bindShortcuts = function(action, combo) {
      return KeyboardJS.on(combo, (function(_this) {
        return function(e) {
          return _this.dispatch(action);
        };
      })(this));
    };

    return ActionHandler;

  })(EventHandler);

  TransmissionHandler = (function(superClass) {
    var source, target;

    extend(TransmissionHandler, superClass);

    source = 'GroundControl';

    target = 'MajorTom';

    function TransmissionHandler() {
      this._recieve = bind(this._recieve, this);
      this.transmit = bind(this.transmit, this);
      window.addEventListener('message', this._recieve);
    }

    TransmissionHandler.prototype.transmit = function(action) {
      return window.postMessage({
        source: this.source,
        action: action
      }, '*');
    };

    TransmissionHandler.prototype._recieve = function(event) {
      if (event.data.source === this.target) {
        console.log(event);
        return this.dispatch(event.data.action);
      }
    };

    return TransmissionHandler;

  })(EventHandler);

  HTMLSelectors = (function() {
    function HTMLSelectors() {}

    HTMLSelectors.toHide = [''];

    HTMLSelectors.toDelete = ['.sliderButton', '.boxShotDivider', '.recentlyWatched .cta-recommend'];

    HTMLSelectors.lists = 'div.mrow';

    HTMLSelectors.list = {
      title: 'div.hd h3',
      moviesWrapper: 'div.bd div.agMovieSet'
    };

    HTMLSelectors.movies = 'div.bd div.agMovieSet div.agMovie';

    HTMLSelectors.movie = {
      title: 'span img',
      poster: 'span img',
      url: 'span a',
      id: 'span a'
    };

    return HTMLSelectors;

  })();

  List = (function() {
    function List(lists, position) {
      if (position == null) {
        position = 0;
      }
      this.HTML = HTMLSelectors;
      this.Object = this._getObject(lists, position);
      this.Title = this._getTitle();
    }

    List.prototype._getObject = function(collection, position) {
      if (position === 0) {
        return collection.first();
      } else if (position === collection.length - 1) {
        return collection.last();
      } else {
        return collection.eq(position);
      }
    };

    List.prototype._getTitle = function() {
      return $.trim(this.Object.find(this.HTML.list.title).last().text());
    };

    return List;

  })();

  Movie = (function() {
    function Movie(movies, position) {
      if (position == null) {
        position = 0;
      }
      this.HTML = HTMLSelectors;
      this.Object = this._getObject(movies, position);
      this.Title = this._getTitle();
      this.Poster = this._getPoster();
      this.URL = this._getURL();
    }

    Movie.prototype._getObject = function(collection, position) {
      if (position === 0) {
        return collection.first();
      } else if (position === collection.length - 1) {
        return collection.last();
      } else {
        return collection.eq(position);
      }
    };

    Movie.prototype._getTitle = function() {
      return this.Object.find(this.HTML.movie.title).attr('alt');
    };

    Movie.prototype._getPoster = function() {
      return this.Object.find(this.HTML.movie.poster).attr('src');
    };

    Movie.prototype._getURL = function() {
      return this.Object.find(this.HTML.movie.url).attr('href');
    };

    return Movie;

  })();

  BaseController = (function() {
    function BaseController() {
      this.cancel = bind(this.cancel, this);
      this.enter = bind(this.enter, this);
      this.left = bind(this.left, this);
      this.right = bind(this.right, this);
      this.down = bind(this.down, this);
      this.up = bind(this.up, this);
      this.doAction = bind(this.doAction, this);
      this.ACTIONS = {
        LEFT: 'left',
        RIGHT: 'right',
        UP: 'up',
        DOWN: 'down',
        OK: 'ok',
        CANCEL: 'cancel'
      };
      $(document).on("NetflixHTPC", (function(_this) {
        return function(e) {
          console.log("jquery event:", e);
          return _this.doAction(e.action);
        };
      })(this));
    }

    BaseController.prototype.doAction = function(action) {
      return console.log("Do " + action);
    };

    BaseController.prototype.up = function() {
      return console.log("up");
    };

    BaseController.prototype.down = function() {
      return console.log("down");
    };

    BaseController.prototype.right = function() {
      return console.log("right");
    };

    BaseController.prototype.left = function() {
      return console.log("left");
    };

    BaseController.prototype.enter = function() {
      return console.log("enter");
    };

    BaseController.prototype.cancel = function() {
      return console.log("cancel");
    };

    return BaseController;

  })();

  HomeController = (function(superClass) {
    extend(HomeController, superClass);

    function HomeController() {
      this.navigateToMovie = bind(this.navigateToMovie, this);
      this.navigateToList = bind(this.navigateToList, this);
      this._move = bind(this._move, this);
      this.right = bind(this.right, this);
      this.down = bind(this.down, this);
      this.up = bind(this.up, this);
      this.left = bind(this.left, this);
      this._getRowSize = bind(this._getRowSize, this);
      this.doAction = bind(this.doAction, this);
      HomeController.__super__.constructor.apply(this, arguments);
      this.HTML = HTMLSelectors;
      $(window).resize(this._getRowSize);
      this.lists = $(this.HTML.lists);
      this.listIndex = 0;
      this.List = new List(this.lists, this.listIndex);
      this.movies = this.List.Object.find(this.HTML.movies);
      this.movieIndex = 0;
      this.Movie = new Movie(this.movies, this.movieIndex);
    }

    HomeController.prototype.doAction = function(action) {
      switch (action) {
        case this.ACTIONS.LEFT:
          return this.left();
        case this.ACTIONS.RIGHT:
          return this.right();
        case this.ACTIONS.UP:
          return this.up();
        case this.ACTIONS.DOWN:
          return this.down();
        case this.ACTIONS.OK:
          return this.confirm();
        case this.ACTIONS.CANCEL:
          return this.cancel();
      }
    };

    HomeController.prototype._getRowSize = function(event) {
      var i, len, movie, ref;
      this.RowSize = 0;
      ref = this.movies;
      for (i = 0, len = ref.length; i < len; i++) {
        movie = ref[i];
        if (movie.prev().length > 0 && $(this).position().top !== $(this).prev().position().top) {
          break;
        }
        lisInRow++;
      }
      return this.LastRowSize = this.movies.length % lisInRow === 0 ? lisInRow : this.movies.length % lisInRow;
    };

    HomeController.prototype.left = function() {
      return this._move(-1, 0);
    };

    HomeController.prototype.up = function() {
      return this._move(0, -1);
    };

    HomeController.prototype.down = function() {
      return this._move(0, 1);
    };

    HomeController.prototype.right = function() {
      return this._move(1, 0);
    };

    HomeController.prototype._move = function(x, y) {
      if (y === 0) {
        this.navigateToMovie(this.movieIndex + x);
      }
      if (x === 0) {
        return this.navigateToMovie(this.movieIndex + this.RowSize);
      }
    };

    HomeController.prototype.navigateToList = function(newIndex) {
      if (this.lists.length - 1 < newIndex) {
        false;
      }
      this.List.Object.removeClass('active-list');
      this.listIndex = newIndex;
      this.List = new List(this.lists, this.listIndex);
      this.List.Object.addClass('active-list');
      return this.navigateToMovie(0);
    };

    HomeController.prototype.navigateToMovie = function(newIndex) {
      if (this.movies.length - 1 < newIndex) {
        this.navigateToList(this.listIndex + 1);
        false;
      }
      this.Movie.Object.removeClass('active-movie');
      this.movieIndex = newIndex;
      this.Movie = new List(this.movies, this.movieIndex);
      return this.Movie.Object.addClass('active-movie');
    };

    return HomeController;

  })(BaseController);

  ttt = new ActionHandler;

  ttFt = new HomeController;

  script = document.createElement("script");

  script.src = chrome.extension.getURL("js/jquery/jquery.min.js");

  document.head.appendChild(script);

  script = document.createElement("script");

  script.src = chrome.extension.getURL("src/inject/js/controller.js");

  document.head.appendChild(script);

  window.addEventListener('message', function(event) {
    if (event.data.type === 'sync_get') {
      console.log(event);
      return window.postMessage({
        type: "sync_get_response",
        items: 'items'
      }, '*');
    }
  });

  msg = new TransmissionHandler;

}).call(this);
