// Generated by CoffeeScript 1.9.1
(function() {
  var ActionHandler, BaseController, DomManipulation, EventHandler, GenreController, GenreSelectors, GridController, HTMLSelectors, HomeController, HomeSelectors, List, Movie, TransmissionHandler, getObjectKeyInArray, isEmpty, msg, script, ttFt, ttt,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  chrome.extension.sendMessage({}, function(response) {
    var readyStateCheckInterval;
    readyStateCheckInterval = setInterval(function() {
      var anchor, movie;
      if (document.readyState === "complete") {
        clearInterval(readyStateCheckInterval);
        console.log("Hello. This message was sent from scripts/inject.jasds");
        movie = $('.agMovie.agMovie-lulg').first().find("a");
        $(".gallery").bind("DOMNodeInserted", function() {
          return console.log("child is appended");
        });
        movie.simulate('mouseover');
        anchor = movie.find("a") || movie;
        anchor.simulate('mouseover');
      }
    }, 10);
  });

  getObjectKeyInArray = function(array, object) {
    var el, i, j, len;
    for (i = j = 0, len = array.length; j < len; i = ++j) {
      el = array[i];
      if (el === object) {
        return i;
      }
    }
    return false;
  };

  isEmpty = function(variable) {
    return !(variable != null ? variable.length : void 0);
  };

  EventHandler = (function() {
    var hhh;

    hhh = [];

    function EventHandler() {
      this.dispatch = bind(this.dispatch, this);
    }

    EventHandler.prototype.dispatch = function(action) {
      $.event.trigger({
        type: "NetflixHTPC",
        action: action
      });
      return false;
    };

    return EventHandler;

  })();

  ActionHandler = (function(superClass) {
    extend(ActionHandler, superClass);

    ActionHandler.actions = ['left', 'up', 'right', 'down', 'ok', 'cancel'];

    function ActionHandler() {
      this.bindShortcuts = bind(this.bindShortcuts, this);
      this.initShortcuts = bind(this.initShortcuts, this);
      ActionHandler.__super__.constructor.apply(this, arguments);
      this.initShortcuts();
    }

    ActionHandler.prototype.initShortcuts = function() {
      return chrome.storage.sync.get(this.actions, (function(_this) {
        return function(shortcuts) {
          var action, combo, results;
          results = [];
          for (action in shortcuts) {
            combo = shortcuts[action];
            results.push(_this.bindShortcuts(action, combo));
          }
          return results;
        };
      })(this));
    };

    ActionHandler.prototype.bindShortcuts = function(action, combo) {
      console.log(action);
      return KeyboardJS.on(combo, (function(_this) {
        return function(e) {
          return _this.dispatch(action);
        };
      })(this));
    };

    return ActionHandler;

  })(EventHandler);

  TransmissionHandler = (function(superClass) {
    extend(TransmissionHandler, superClass);

    function TransmissionHandler() {
      this._recieve = bind(this._recieve, this);
      this.transmit = bind(this.transmit, this);
      this.source = 'GroundControl';
      this.target = 'MajorTom';
      window.addEventListener('message', this._recieve);
    }

    TransmissionHandler.prototype.transmit = function(action) {
      return window.postMessage({
        source: this.source,
        target: this.target,
        action: action
      }, '*');
    };

    TransmissionHandler.prototype._recieve = function(event) {
      if (event.data.source === this.target) {
        console.log(event);
        return this.dispatch(event.data.action);
      }
    };

    return TransmissionHandler;

  })(EventHandler);

  HTMLSelectors = (function() {
    function HTMLSelectors() {}

    HTMLSelectors.toHide = [''];

    HTMLSelectors.toDelete = ['.sliderButton', '.boxShotDivider', '.recentlyWatched .cta-recommend'];

    HTMLSelectors.nav = '.nav-wrap';

    HTMLSelectors.HTMLAndBody = 'html, body';

    HTMLSelectors.activeClass = {
      list: '.active-list',
      movie: '.active-movie'
    };

    return HTMLSelectors;

  })();

  HomeSelectors = (function(superClass) {
    extend(HomeSelectors, superClass);

    function HomeSelectors() {
      return HomeSelectors.__super__.constructor.apply(this, arguments);
    }

    HomeSelectors.lists = 'div.mrow';

    HomeSelectors.list = {
      title: 'div.hd h3',
      moviesWrapper: 'div.bd div.agMovieSet'
    };

    HomeSelectors.movies = 'div.bd div.agMovieSet div.agMovie';

    HomeSelectors.movies = 'div.bd div.agMovie';

    HomeSelectors.movieClass = '.agMovie';

    HomeSelectors.movie = {
      title: 'span img',
      poster: 'span img',
      url: 'span a',
      id: 'span a'
    };

    return HomeSelectors;

  })(HTMLSelectors);

  GenreSelectors = (function(superClass) {
    extend(GenreSelectors, superClass);

    function GenreSelectors() {
      return GenreSelectors.__super__.constructor.apply(this, arguments);
    }

    GenreSelectors.lists = 'div#genrePage';

    GenreSelectors.list = {
      title: 'div#genreControls a#title',
      moviesWrapper: 'div.gallery'
    };

    GenreSelectors.movies = 'div.gallery div.lockup';

    GenreSelectors.movieClass = '.lockup';

    GenreSelectors.movie = {
      title: 'img',
      poster: 'img',
      url: 'a',
      id: 'a'
    };

    return GenreSelectors;

  })(HTMLSelectors);

  DomManipulation = (function() {
    function DomManipulation() {}

    DomManipulation.toggleElement = function(type, newElement, oldElement) {
      var activeClass;
      activeClass = HTMLSelectors.activeClass[type].substr(1);
      if (oldElement != null) {
        oldElement.removeClass(activeClass);
      }
      newElement.addClass(activeClass);
      if (type === 'movie') {
        return this.scrollToElement(newElement);
      }
    };

    DomManipulation.scrollToElementOLD = function(element) {
      var ElementBottom, ElementTop, HTML, offsetBottom, offsetTop;
      HTML = HTMLSelectors;
      offsetTop = (element.offset().top + element.height()) - $(window).scrollTop();
      offsetBottom = $(window).scrollTop() - (element.offset().top + element.height());
      ElementBottom = (element.offset().top - window.innerHeight) + element.height();
      ElementTop = element.offset().top - $(HTML.nav).height();
      if (offsetTop > window.innerHeight || element.offset().top < $(window).scrollTop()) {
        return $(HTML.HTMLAndBody).stop().animate({
          scrollTop: ElementBottom
        }, 300);
      } else if (offsetBottom < 0) {
        return $(HTML.HTMLAndBody).stop().animate({
          scrollTop: ElementTop
        }, 300);
      }
    };

    DomManipulation.scrollToElement = function(element) {
      var HTML, alignedToBottom, alignedToTop, eHeight, eOffset, nHeight, scrollPosition, wHeight, wScrollTop;
      HTML = HTMLSelectors;
      wHeight = $(window).height();
      wScrollTop = $(window).scrollTop();
      eOffset = element.offset().top;
      eHeight = element.height();
      nHeight = $(HTML.nav).height();
      alignedToBottom = eOffset - wHeight + eHeight;
      alignedToTop = eOffset - nHeight;
      if (eOffset - wScrollTop + eHeight > wHeight) {
        scrollPosition = alignedToTop;
      } else if (eOffset < wScrollTop) {
        scrollPosition = alignedToBottom;
      }
      return $(HTML.HTMLAndBody).stop().animate({
        scrollTop: scrollPosition
      }, 300);
    };

    return DomManipulation;

  })();

  List = (function() {
    function List(HTMLSelectors, lists, position) {
      if (position == null) {
        position = 0;
      }
      this.HTML = HTMLSelectors;
      this.Object = this._getObject(lists, position);
      this.Title = this._getTitle();
    }

    List.prototype._getObject = function(collection, position) {
      if (position === 0) {
        return collection.first();
      } else if (position === collection.length - 1) {
        return collection.last();
      } else {
        return collection.eq(position);
      }
    };

    List.prototype._getTitle = function() {
      return $.trim(this.Object.find(this.HTML.list.title).last().text());
    };

    return List;

  })();

  Movie = (function() {
    function Movie(HTMLSelectors, movies, position) {
      if (position == null) {
        position = 0;
      }
      this.HTML = HTMLSelectors;
      this.Object = this._getObject(movies, position);
      this.Title = this._getTitle();
      this.Poster = this._getPoster();
      this.URL = this._getURL();
    }

    Movie.prototype._getObject = function(collection, position) {
      if (position === 0) {
        return collection.first();
      } else if (position === collection.length - 1) {
        return collection.last();
      } else {
        return collection.eq(position);
      }
    };

    Movie.prototype._getTitle = function() {
      return this.Object.find(this.HTML.movie.title).attr('alt');
    };

    Movie.prototype._getPoster = function() {
      return this.Object.find(this.HTML.movie.poster).attr('src');
    };

    Movie.prototype._getURL = function() {
      return this.Object.find(this.HTML.movie.url).attr('href');
    };

    return Movie;

  })();

  BaseController = (function() {
    function BaseController() {
      this.cancel = bind(this.cancel, this);
      this.enter = bind(this.enter, this);
      this.left = bind(this.left, this);
      this.right = bind(this.right, this);
      this.down = bind(this.down, this);
      this.up = bind(this.up, this);
      this.doAction = bind(this.doAction, this);
      this.ACTIONS = {
        LEFT: 'left',
        RIGHT: 'right',
        UP: 'up',
        DOWN: 'down',
        OK: 'ok',
        CANCEL: 'cancel'
      };
      $(document).on("NetflixHTPC", (function(_this) {
        return function(e) {
          return setTimeout(function() {
            console.log("jquery event:", e);
            return _this.doAction(e.action);
          }, 0);
        };
      })(this));
    }

    BaseController.prototype.doAction = function(action) {
      return console.log("Do " + action);
    };

    BaseController.prototype.up = function() {
      return console.log("up");
    };

    BaseController.prototype.down = function() {
      return console.log("down");
    };

    BaseController.prototype.right = function() {
      return console.log("right");
    };

    BaseController.prototype.left = function() {
      return console.log("left");
    };

    BaseController.prototype.enter = function() {
      return console.log("enter");
    };

    BaseController.prototype.cancel = function() {
      return console.log("cancel");
    };

    return BaseController;

  })();

  GridController = (function(superClass) {
    extend(GridController, superClass);

    function GridController(HTMLSelectors) {
      this._updateMovie = bind(this._updateMovie, this);
      this._updateList = bind(this._updateList, this);
      this._prevList = bind(this._prevList, this);
      this._nextList = bind(this._nextList, this);
      this._mouseMove = bind(this._mouseMove, this);
      this._gridMove = bind(this._gridMove, this);
      this.right = bind(this.right, this);
      this.down = bind(this.down, this);
      this.up = bind(this.up, this);
      this.left = bind(this.left, this);
      this._getRowSize = bind(this._getRowSize, this);
      this.doAction = bind(this.doAction, this);
      GridController.__super__.constructor.apply(this, arguments);
      this.HTML = HTMLSelectors;
      this.lists = $(this.HTML.lists);
      this._updateList(0);
      this._updateMovie(0);
      $(window).resize(this._getRowSize);
      $(this.HTML.movies).mouseover(this._mouseMove);
    }

    GridController.prototype.doAction = function(action) {
      switch (action) {
        case this.ACTIONS.LEFT:
          return this.left();
        case this.ACTIONS.RIGHT:
          return this.right();
        case this.ACTIONS.UP:
          return this.up();
        case this.ACTIONS.DOWN:
          return this.down();
        case this.ACTIONS.OK:
          return this.confirm();
        case this.ACTIONS.CANCEL:
          return this.cancel();
      }
    };

    GridController.prototype._getRowSize = function(event) {
      var j, len, movie, ref;
      this.RowSize = 0;
      ref = this.movies;
      for (j = 0, len = ref.length; j < len; j++) {
        movie = ref[j];
        if ($(movie).prev().length > 0 && $(movie).position().top !== $(movie).prev().position().top) {
          break;
        }
        this.RowSize++;
      }
      return this.LastRowSize = this.movies.length % this.RowSize === 0 ? this.RowSize : this.movies.length % this.RowSize;
    };

    GridController.prototype.left = function() {
      return this._gridMove(-1, 0);
    };

    GridController.prototype.up = function() {
      return this._gridMove(0, -1);
    };

    GridController.prototype.down = function() {
      return this._gridMove(0, 1);
    };

    GridController.prototype.right = function() {
      return this._gridMove(1, 0);
    };

    GridController.prototype._gridMove = function(x, y) {
      var axis, newMovieIndex, nextList, prevList;
      if (y === 0) {
        axis = 'horizontal';
        newMovieIndex = this.movieIndex + x;
      }
      if (x === 0) {
        axis = 'vertical';
        newMovieIndex = this.movieIndex + (this.RowSize * y);
      }
      if (this.movies[newMovieIndex]) {
        return this._updateMovie(newMovieIndex);
      } else {
        nextList = this.lists[this.listIndex + 1];
        prevList = this.lists[this.listIndex - 1];
        if (this.movies.length - 1 < newMovieIndex && (nextList != null)) {
          newMovieIndex = this._nextList(axis);
        } else if (newMovieIndex < 0 && (prevList != null)) {
          newMovieIndex = this._prevList(axis);
        } else {
          return false;
        }
        this._updateMovie(newMovieIndex);
        return true;
      }
    };

    GridController.prototype._mouseMove = function(e) {
      setTimeout((function(_this) {
        return function() {
          var newListIndex, newMovieIndex;
          if (!$(e.delegateTarget).hasClass(_this.HTML.movieClass.substr(1))) {
            return false;
          }
          newListIndex = $(e.delegateTarget).parents(_this.HTML.lists) ? getObjectKeyInArray(_this.lists, $(e.delegateTarget).parents(_this.HTML.lists)[0]) : _this.listIndex;
          newMovieIndex = getObjectKeyInArray(_this.movies, e.delegateTarget);
          _this._updateList(newListIndex);
          _this._updateMovie(newMovieIndex);
          return true;
        };
      })(this), 0);
      return true;
    };

    GridController.prototype._nextList = function(axis) {
      var j, newMovieIndex, ref, ref1, results;
      if (axis === 'horizontal') {
        newMovieIndex = 0;
        return this._updateList(this.listIndex + 1);
      } else if (axis === 'vertical') {
        if (ref = this.movieIndex, indexOf.call((function() {
          results = [];
          for (var j = 0, ref1 = this.movies.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; 0 <= ref1 ? j++ : j--){ results.push(j); }
          return results;
        }).apply(this).slice(-this.LastRowSize), ref) >= 0) {
          newMovieIndex = this.movieIndex % this.RowSize;
          this._updateList(this.listIndex + 1);
          return newMovieIndex;
        } else {
          newMovieIndex = this.movies.length - 1;
          return newMovieIndex;
        }
      }
    };

    GridController.prototype._prevList = function(axis) {
      var j, newMovieIndex, ref, results;
      this._updateList(this.listIndex - 1);
      if (axis === 'horizontal') {
        return this.movies.length - 1;
      } else if (axis === 'vertical') {
        if (this.LastRowSize - 1 >= this.movieIndex) {
          newMovieIndex = (function() {
            results = [];
            for (var j = 0, ref = this.movies.length - 1; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--){ results.push(j); }
            return results;
          }).apply(this).slice(-this.LastRowSize)[this.movieIndex];
          return newMovieIndex;
        } else {
          newMovieIndex = this.movies.length - 1;
          return newMovieIndex;
        }
      }
    };

    GridController.prototype._updateList = function(newIndex) {
      var oldList;
      if (newIndex === this.listIndex || isEmpty(this.lists)) {
        return false;
      }
      oldList = this.List != null ? this.List.Object : null;
      this.listIndex = newIndex;
      this.List = new List(this.HTML, this.lists, this.listIndex);
      this.movies = this.List.Object.find(this.HTML.movies);
      this._getRowSize();
      return DomManipulation.toggleElement('list', this.List.Object, oldList);
    };

    GridController.prototype._updateMovie = function(newIndex) {
      var oldMovie;
      if (newIndex === this.movieIndex || isEmpty(this.movies)) {
        return false;
      }
      oldMovie = this.Movie != null ? this.Movie.Object : null;
      this.movieIndex = newIndex;
      this.Movie = new Movie(this.HTML, this.movies, this.movieIndex);
      return DomManipulation.toggleElement('movie', this.Movie.Object, oldMovie);
    };

    return GridController;

  })(BaseController);

  HomeController = (function(superClass) {
    extend(HomeController, superClass);

    function HomeController() {
      this.HTML = HomeSelectors;
      HomeController.__super__.constructor.call(this, this.HTML);
    }

    return HomeController;

  })(GridController);

  GenreController = (function(superClass) {
    extend(GenreController, superClass);

    function GenreController() {
      this.HTML = GenreSelectors;
      GenreController.__super__.constructor.call(this, this.HTML);
    }

    return GenreController;

  })(GridController);

  ttt = new ActionHandler;

  if (window.location.pathname.match("/WiHome")) {
    ttFt = new HomeController;
  } else if (window.location.pathname.match("/WiGenre")) {
    ttFt = new GenreController;
  }

  script = document.createElement("script");

  script.src = chrome.extension.getURL("js/jquery/jquery.min.js");

  document.head.appendChild(script);

  script = document.createElement("script");

  script.src = chrome.extension.getURL("src/inject/js/controller.js");

  document.head.appendChild(script);

  window.addEventListener('message', function(event) {
    if (event.data.type === 'sync_get') {
      console.log(event);
      return window.postMessage({
        type: "sync_get_response",
        items: 'items'
      }, '*');
    }
  });

  msg = new TransmissionHandler;

}).call(this);
